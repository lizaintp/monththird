from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.storage import FSMContext
from config import token 
import logging, sqlite3, time, re

bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

connection = sqlite3.connect('logistics.db')
cursor = connection.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS users(
    id INTEGER PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    phone VARCHAR(100),
    age INTEGER,
    created VARCHAR(100)
);
""")

start_buttons = [
    types.KeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
    types.KeyboardButton('–®–∞–±–ª–æ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
]
start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*start_buttons)

@dp.message_handler(commands='start')
async def start(message:types.Message):
    await message.answer("""–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç –∫–∞—Ä–≥–æ –∫–æ–º–ø–∞–Ω–∏–∏ Geeks Express.
–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ üá®üá≥
–° –£–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ Geeks Express :)
""", reply_markup=start_keyboard)

class RegisterState(StatesGroup):
    first_name = State()
    last_name = State()
    phone = State()
    age = State()

@dp.message_handler(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_register(message:types.Message):
    await message.answer(f"{message.from_user.full_name} –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
    await RegisterState.first_name.set()

@dp.message_handler(state=RegisterState.first_name)
async def get_user_lastname(message:types.Message, state:FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
    await RegisterState.last_name.set()

@dp.message_handler(state=RegisterState.last_name)
async def get_user_phone(message:types.Message, state:FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä:")
    await RegisterState.phone.set()

@dp.message_handler(state=RegisterState.phone)
async def get_user_age(message:types.Message, state:FSMContext):
    phone_pattern = re.compile(r'^\+\d{12}$')
    if not phone_pattern.match(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +996XXXXXXXXX")
        return
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
    await RegisterState.age.set()

@dp.message_handler(state=RegisterState.age)
async def end_register_user(message:types.Message, state:FSMContext):
    age = int(message.text)
    if age < 14:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 14 –ª–µ—Ç")
        return
    await state.update_data(age=age)
    data = await state.get_data()
    user_data = (message.from_user.id, data['first_name'], data['last_name'], data['phone'], data['age'], time.strftime("%Y-%m-%d %H:%M:%S"))
    cursor.execute("INSERT INTO users (id, first_name, last_name, phone, age, created) VALUES (?, ?, ?, ?, ?, ?)", user_data)
    connection.commit()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await state.finish()

@dp.message_handler()
async def not_found(message:types.Message):
    await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –≤–≤–µ–¥–∏—Ç–µ /start")

executor.start_polling(dp, skip_updates=True)
